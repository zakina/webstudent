<?php

namespace webStudent\EtudiantBundle\Entity;

use Doctrine\ORM\EntityRepository;
use webStudent\EtudiantBundle\Entity\Section;
use webStudent\StageBundle\Entity\Stage;

/**
 * EtudiantRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EtudiantRepository extends EntityRepository
{
public function rechercherEtudiant($data)
	{
		$pNom = strtoupper($data['nom']);
		$pSection = $data['section']->getId();
		$pPromo = $data['promo']->getId();
		$pNiveau= $data['niveau']->getId();
		
		$queryBuilder = $this->createQueryBuilder('e');	
		$queryBuilder->join('e.section', 's')
						->join('e.promo', 'p')
						->join('e.niveau','n')
						->where('e.nom like :leNom') ;				
		if ($pSection == -1)
		{
			// Je souhaite toutes les sections donc, id différent de -1
			$queryBuilder->andWhere('s.id <> :laSection');
		}
		else
		{
			$queryBuilder->andWhere('s.id= :laSection');
		}
		
		if ($pPromo == -1)
		{
			$queryBuilder->andWhere('p.id <> :laPromo');
		}
		else
		{
			$queryBuilder->andWhere('p.id = :laPromo');
		}
		
		if ($pNiveau == -1)
		{
			$queryBuilder->andWhere('n.id <> :leNiveau')
						->orderBy('n.id', 'ASC');
		}
		else
		{
			$queryBuilder->andWhere('n.id = :leNiveau');
							
		}
						
		
		//->andWhere($queryBuilder->expr()->between('s.id', $pSectionDeb, $pSectionFin))
				
		$queryBuilder->setParameter('leNom', '%'.$pNom.'%')
						->setParameter('laSection', $pSection)
						->setParameter('laPromo', $pPromo)
						->setParameter('leNiveau', $pNiveau)
						->orderBy('e.nom', 'ASC');
		
		/*Requete equivalente mais plus détaillée
		$queryBuilder = $this->_em->createQueryBuilder()
                              ->select('e')
							  ->where('e.nom like :leNom')
								->setParameter('leNom', $pNom)
								->orderBy('e.nom', 'ASC')
                              ->from($this->_entityName, 'e');*/
		 
    // On a fini de construire notre requête
 
    // On récupère la Query à partir du QueryBuilder
    $query = $queryBuilder->getQuery();
	//var_dump($query);
    // On récupère les résultats à partir de la Query
    $resultats = $query->getResult();
 
    // On retourne ces résultats
    return $resultats;
}

	public function getAvecStages($idEtudiant)
  {
    
	
	$qb = $this->createQueryBuilder('e')
             ->innerJoin('e.stages', 's')
			 ->where('e.id = :lIdEtudiant');
	$qb->setParameter('lIdEtudiant', $idEtudiant)
             ->addSelect('s');
			 var_dump($qb->getQuery());
	return $qb->getQuery()->getResult();
	
	
	

	/*
	$qb = $this->createQueryBuilder('e');
    // On fait une jointure avec l'entité stage, avec pour alias « s »
    $qb ->join('e.stages', 's')
        ->where($qb->expr()->in('s.id', $idEtudiant)); // Puis on filtre sur le nom des stages à l'aide d'un IN

    // Enfin, on retourne le résultat
    return $qb->getQuery()
              ->getResult();
	*/
	
	
	/*
	$queryBuilder = $this->createQueryBuilder('e');	
	$queryBuilder->join('e.stages', 's')
						->where('e.id = :lIdEtudiant') ;		
	
	$queryBuilder->setParameter('lIdEtudiant', $idEtudiant);
	// On récupère la Query à partir du QueryBuilder
    $query = $queryBuilder->getQuery();
 
    // On récupère les résultats à partir de la Query
    $resultats = $query->getResult();
 
    // On retourne ces résultats
    return $resultats;*/
}
	
  




}
